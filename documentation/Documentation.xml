<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
    <bookinfo>
        <title>Blackjack-Implementation with XML-Technologies</title>
        <author>
            <firstname>Patryk</firstname>
            <surname>Brzoza</surname>
        </author>
        <author>
            <firstname>Moritz</firstname>
            <surname>Issig</surname>
        </author>
        <author>
            <firstname>Fami</firstname>
            <surname>Mahmud</surname>
        </author>
    </bookinfo>
    <chapter>
        <title>Introduction</title>
        <para>This DocBook documents the development and implementation of a multi-client Blackjack
            game, which is only using XML-Technologies. We will present an overview over these
            Technologies and the way we used them. Furthermore, it describes the rules and
            strategies we agreed on for our Blackjack Game, the important phases with possible user
            actions, the interaction between client and server, as well as the design and
            implementation in detail. A complete walkthrough with the installation of the game and
            an example of a game play will be shown. In addition, we will discuss the way we
            organized our project and reflect on positive and negative aspects. </para>

        <sect1>
            <title>Project Overview</title>
            <para>The Project is part of the practical course XML-Technologies (IN0012, IN2106,
                IN4013) in the winter term 2019/2020. Throughout the lecture Prof. Anne
                Br√ºggemann-Klein and Phillip Ulrich introduced us to the XML-Technologies such as
                SVG, XHTML, XSLT, XQuery and XPath. The objective of this project is to implement a
                multi-client browser game of Blackjack by making use of XML-Technologies
                exclusively. </para>
            <para>During the first part of the lab we received tasks every week which we were able
                to complete with the newly introduced technology. In this manner we were able to get
                to know and to practice the use of the important technologies step by step. </para>
            <para>The second part, the actual development project, began after the last meeting in
                the second week of January. We had to organize ourselves within the group and decide
                on methodologies on how to implement, design and document the requirements stated in
                the project assignment. The project ends with the completed game, documentation and
                a final presentation. </para>
        </sect1>
        <sect1>
            <title>Blackjack Concept</title>
            <para>We decided to implement a general Blackjack game according the basic rules defined
                by Bicycle [<ulink url="https://bicyclecards.com/how-to-play/blackjack/"/>]. We did
                not implement additional rules like 'splitting pairs' or 'doubling down'. </para>
            <sect2>
                <title>Game Rules</title>
                <para>The target of each player is to reach a combined card value as close to 21 as
                    possible, without going over 21 but beating the dealer. </para>
                <sect3>
                    <title>Players</title>
                    <para>To start a round at least one player has to be in the game, but in one
                        game a maximum of 7 players are allowed. Nevertheless, every player is
                        playing each for himself against the dealer, which is represented by the
                        computer. </para>
                </sect3>
                <sect3>
                    <title>Betting</title>
                    <para>Every player bets an amount of chips, which will be placed in the pool.
                        Obviously it is not possible to bet more chips than the participant has in
                        its wallet. </para>
                </sect3>
                <sect3>
                    <title>Cards</title>
                    <para>We use a six-deck game, which means that six decks with 52-cards are
                        combined to 312-cards. In the dealing phase two cards face up will be
                        distributed to each player after the betting phase. The Dealer takes one
                        card face up and the second card face down. Each card takes its pip value
                        and face cards are 10. Aces can take the value of 11 or 1, this depends on
                        the count. If the count is over 21 the value of ace switches to 1. </para>
                </sect3>
                <sect3>
                    <title>The Play</title>
                    <para>As a player you must decide if you want to get another card ("hit") or if
                        you don't want another card ("stand"). You can repeat this until you reach a
                        count over 21. </para>
                </sect3>
                <sect3>
                    <title>Dealer's Play</title>
                    <para>Once all players stand on their Cards the dealer's second card gets turned
                        up. Now the dealer takes cards until he has a count of 17 or more, at which
                        point the dealer must stand. </para>
                </sect3>
                <sect3>
                    <title>Pay Phase</title>
                    <para>The winner gets determined by comparing the count of the player with the
                        dealer's total card value. A player wins and gets paid double of his bet
                        when the dealer has a lower hand or if the dealer goes bust. The dealer wins
                        if he has a higher hand or the player goes bust. In this case the player
                        loses his bet. A tie is possible if both have the same total value. Then the
                        player gets back his bet.</para>
                </sect3>
            </sect2>
        </sect1>

    </chapter>
    <chapter>
        <title>Technologies</title>
        <para>As a both mentioned we were introduced into powerful Tools which make it possible
            write a documentation, to save and encode data of a game state, to generate a GUI using
            the saved data, as well as interact with data. In the following these Tools are
            addressed and briefly introduced.</para>
        <sect1>
            <title>XML</title>
            <para>XML is the basis for this project. It stands for Extensible Markup Language and
                defines a set of rules in which documents get encoded in a platform independent
                format that is readable for humans and computers due to its clear and simple
                structure. The data of game states are encoded in XML and therefore can easily be
                transformed and transferred to the web. </para>
        </sect1>
        <sect1>
            <title>DocBook</title>
            <para>DocBook is a semantic markup language which we use for our documentation. It
                simplifies the creation of documents with a clear logical structure. In addition,
                the data is saved in a neutral format which makes it possible to easily transform it
                to a variety of formats, including HTML, XHTML, PDF, etc. Furthermore, the content
                quality can be improved by automatic validation through a DTD file.</para>
        </sect1>
        <sect1>
            <title>SVG</title>
            <para>SVG (Scalable Vector Graphics) is a language to define vector based 2-dimensional
                graphical objects. SVG images are defined in XML-format. We used it to create all
                our graphical components like cards, chips, buttons, etc. </para>
        </sect1>
        <sect1>
            <title>XSLT</title>
            <para>"XSLT (Extensble Stylsheet Language Transformations) is a language for
                transforming XML documents into other XML documents or other formats such as HTML
                for web pages, plain text or XSL Formatting Objects, which may subsequently be
                converted to other formats, such as PDF, PostScript and PNG.  "(Source: <ulink url="https://en.wikipedia.org/wiki/XSLT"/>). In our project it is used to
                dynamically transform our game states encoded in XML into an XHTML document, which
                can be used to graphically display the game state in the browser. Moreover, the
                chips and cards are dynamically transformed using XSLT. The elements of the XML
                documents are selected with a query language called XPath. XPath is a big a part of
                XSLT and widely used to navigate through elements and attributes. </para>
        </sect1>
        <sect1>
            <title>XQuery</title>
            <para>Xquery is a very efficient querying language for XML databases. It enables the
                interaction with the databases. Which makes it possible to delete, insert and
                replace database nodes. Just like in XSLT nodes are addressed using XPath. The  game
                actions are implemented using Xquery functions. The functions are initiated by
                HTTP-Request which are mapped by RESTXQ-Annotations (for example:
                "localhost:8984/docbook_blackjack/lobby").  </para>
        </sect1>
        <sect1>
            <title>BaseX</title>
            <para>BaseX is a management system for XML databases and a Xquery processor. BaseX
                represents the server side of our implementation to store the databases. It makes it
                possible to query big XML documents as well as transfer the transformed data to the
                clients using Websockets. </para>
        </sect1>
        <sect1>
            <title>Websocket</title>
            <para>Since a REST-Response can only be send to the client, who sent the REST-Request,
                Websockets are an usefull tool to send updates also to clients, which doesn't sent a
                request. BaseX-STOMP offers these websockets. If a client opens a page he subscribes
                to the websocket. This websocket-connection will not be closed. The server can then
                send massages to all clients, which subscribed to the websocket. Also a client can
                send a message to the server.</para>
        </sect1>
    </chapter>
    <chapter>
        <title>Project Requirements</title>
        <para>The project requirements were initially specified in the project exercise and describe
            the expected functionality of the Blackjack game while at the same time acting as the
            project backlog for our development process. Based on the given aspects, we have
            considered the following points for our final implementation:</para>
        <itemizedlist>
            <listitem>
                <para>The game should follow the blackjack concept as introduced in Chapter
                    1.</para>
            </listitem>
            <listitem>
                <para>The project is to be implemented as a web application by purely making use of
                    XML technologies described in the Chapter 2.</para>
            </listitem>
            <listitem>
                <para>The game must be implemented using the multi-client principle, i.e. it should
                    be possible for multiple persons to play one single game within their own client
                    instance.</para>
            </listitem>
            <listitem>
                <para>Apart from the game functionality itself, a Lobby must be implemented such
                    that players are able to register themselves and to create or join games.
                    Players are assigned a randomly generated ID which can be used to restore player
                    accounts from previous sessions.</para>
            </listitem>
            <listitem>
                <para>The Lobby should also include a highscore board keeping track of the highest
                    player scores achieved throughout their finished games.</para>
            </listitem>
            <listitem>
                <para>The system architecture must follow the Model-View-Controller (MVC) pattern.
                    Each method should be included in its particular module, which is responsible
                    for its area in the MVC model.</para>
            </listitem>
            <listitem>
                <para>A high degree of parametrization and customizability should be given in order
                    to guarantee a high reusability of system fragments. This encourages the general
                    software engineering rule of low coupling and high cohesion between
                    modules.</para>
            </listitem>
            <listitem>
                <para>The design process is to be modelled and documented adequately, thus
                    encouraging a model driven development process. For instance, the usage of
                    low-fidelity prototypes such as sketches allows to describe the functionality of
                    the user interface. Class diagrams should be used to model data and method
                    relations, activity and state diagrams should model the system behavior.
                    Additionally, a description of all REST requests and responses between the
                    client and the server should be created.</para>
            </listitem>
            <listitem>
                <para>Finally, the previous design models and decisions are to be included in this
                    documentation, which should give an overview of the whole project.</para>
            </listitem>
        </itemizedlist>
    </chapter>
    <chapter>
        <title>Design and Implementation</title>
        <para/>
        <sect1>
            <title>Templates</title>
            <para/>
        </sect1>
        <sect1>
            <title>Modules</title>
            <para/>
        </sect1>
        <sect1>
            <title>User Actions</title>
            <para/>
        </sect1>
        <sect1>
            <title>Game Setup</title>
            <para/>
            <sect2>
                <title>Card Deck</title>
                <para/>
            </sect2>
            <sect2>
                <title>Player </title>
                <para/>
            </sect2>
        </sect1>
        <sect1>
            <title>Phases</title>
            <para/>
            <para>The Lobby as well as the Game have severale states. An user in the Lobby can be
                either in the "not logged in"-state or in the "logged in"-state. To switch from the
                "not logged in"-state to the "logged in"-state the user has to create a new Account
                (via the createAccount()-function) or, if s*he knows the Id, restore an existing
                Account (via the restoreAccount()-function).</para>
            <para>There are two ways from the Lobby to a Game. First by creating a new game (either
                a singleplayer or multiplayer game) with the newGame()-function or secondly by
                joining an existing multplayer game with the joinGame()-function. In each phase of
                the game a player can leave this game and return to the Lobby (with the
                leave()-function). </para>
            <figure>
                <title>State-Diagram: Game-Phases</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="diagrams/Zustandsdiagramm%20Game.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>A game has four phases:<orderedlist>
                    <listitem>
                        <para>The starting phase is the bet-phase. If an player enters this phase he
                            will subscribe to the websocket of this game. Also the deck will be
                            reseted  All players can bet chips for the netxt round at the same time.
                            Also they can reset their bets to correct mistakes. If all players have
                            confirmed their bets the game switches to the deal-phase.</para>
                    </listitem>
                    <listitem>
                        <para>The deal-phase is completely processed be the backend-system. Firstly
                            each player and the dealer gets one card from the deck. Since this is
                            the frist card for the dealer his card will be hidden. After a database
                            update, which is necessary because the dealer got a first card, each
                            player and also the dealer gets a second card. Now the dealer gets a
                            revealed card. In the next step the first player is set to the player,
                            which is on turn. And then the phase is set to "play". If a leaving
                            player triggered this phase he will be redirected to the Lobby. If not
                            an update of the game-page will be send via the websocket
                            connection.</para>
                    </listitem>
                    <listitem>
                        <para>In the play-phase each player does his turn one after another. A
                            player can hit or stand during his turn. After the last player finished
                            his turn the dealerTurn starts. During the dealerTurn the delaer draw a
                            card if his hand value is lower than 17, updates the databank and
                            restarts the dealerTurn with the additional card. If the hand value is
                            17 or higher he stands and the phase changes to "pay". As in the
                            deal-Phase the dealerTurn can also be triggered by a leaving player. If
                            so this player will be redireted also to the Lobby. If not an update of
                            the game-page will be send via the websocket connection.</para>
                    </listitem>
                    <listitem>
                        <para>The last phase is the pay-phase. At the start of this phase the result
                            of the game is presented on the table. If any player decides to continue
                            all players will be pay, if they win,  then their hands and their pools
                            will be cleared. The dealer also clears his hand. Then the game switches
                            to the bet-phase and an update of the game-page will be send via the
                            websocket connection.</para>
                    </listitem>
                </orderedlist></para>
            <figure>
                <title>Activity-Diagram: Deal-Phase</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="diagrams/Aktivitaetsdiagramm%20Deal-Phase.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para/>
            <figure>
                <title>Activity-Diagram: Dealer-Turn</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="diagrams/Aktivitaetsdiagramm%20DealerTurn.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </sect1>
    </chapter>
    <chapter>
        <title>Architecture</title>
        <para/>
        <sect1>
            <title>MVC Architecture</title>
            <para/>
        </sect1>
        <sect1>
            <title>Data Model</title>
            <para/>
        </sect1>
    </chapter>
    <chapter>
        <title>Game Installation</title>
        <para/>
        <sect1>
            <title>Requirements</title>
            <para/>
        </sect1>
        <sect1>
            <title>Installation</title>
            <para/>
        </sect1>
    </chapter>
    <chapter>
        <title>Game Demo</title>
        <para/>
    </chapter>
    <chapter>
        <title>Team Organisation</title>
        <para/>
        <sect1>
            <title>Development Environment</title>
            <para/>
            <sect2>
                <title>SCRUM</title>
                <para/>
            </sect2>
        </sect1>
        <sect1>
            <title>Conclusion</title>
            <para/>
            <sect2>
                <title>Reflection</title>
                <para/>
            </sect2>
        </sect1>
    </chapter>
</book>
